#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	SslCI_РаботаСГитом.ЗаполнитьСписокВеток(Элементы);
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ВидОбработки") Тогда
		Фильтр = ФильтрПоВиду(Параметры.ВидОбработки);
	Иначе
		Элементы.Фильтр.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущийАдрес") Тогда
		ТекущийАдрес = Параметры.ТекущийАдрес;
	КонецЕсли;
	
	Если Параметры.Свойство("Ветка") Тогда
		Ветка = Параметры.Ветка;
	Иначе
		Ветка = "master";	
	КонецЕсли;
	
	// Отраслевая специфика. 
	Если Метаданные.Константы.Найти("ЭтоРабочаяБаза_ФХС") <> Неопределено
		И Константы["ЭтоРабочаяБаза_ФХС"].Получить() = Истина Тогда
		Элементы.Ветка.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВеткаПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоФайлов

&НаКлиенте
Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ВыборЗначения(ВыбраннаяСтрока);	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ВыборЗначения(Значение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Ветка = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРепозитория = SslCI_РаботаСГитом.ПолучитьДанныеРепозитория(Ветка, Фильтр);
	
	РазложитьДанныеВДерево(ДанныеРепозитория);
	
	Если ЗначениеЗаполнено(ТекущийАдрес) Тогда
		ИдентификаторСтроки = 0;
		ПрекратитьПоиск 	= Ложь;
		НайтиСтрокуДерева(ДеревоФайлов.ПолучитьЭлементы(), ИдентификаторСтроки, ПрекратитьПоиск);
		
		Если ИдентификаторСтроки <> 0 Тогда 
			Элементы.ДеревоФайлов.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РазложитьДанныеВДерево(ДанныеРепозитория)
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	Если Не ДанныеРепозитория.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоФайлов");
	
	Исключения = ПолучитьИспользованныеИмена(ТекущийАдрес);
	
	Для Каждого Файл Из ДанныеРепозитория Цикл
		
		Если Исключения.Найти(Файл) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураХранения = СтрРазделить(Файл, "/", Ложь);
		
		ТекВетка = Неопределено;
		Для Каждого Каталог Из СтруктураХранения Цикл
			Если ТекВетка = Неопределено Тогда
				ТекВетка = Дерево;
			КонецЕсли;
			
			ЦелеваяВетка = ТекВетка.Строки.Найти(Каталог);
			
			Если ЦелеваяВетка = Неопределено Тогда
				ЦелеваяВетка = ТекВетка.Строки.Добавить();
				ЦелеваяВетка.ИмяФайла = Каталог;
				
				Если СтрНайти(Каталог, ".", НаправлениеПоиска.СКонца) > 0 Тогда
					ЦелеваяВетка.Картинка = 3;
					ЦелеваяВетка.ПолныйПутьКФайлу = Файл; 
				КонецЕсли;
			КонецЕсли;
			
			ТекВетка = ЦелеваяВетка;
		КонецЦикла;		
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Картинка Возр, ИмяФайла Возр", Истина); 
	
	ЗначениеВДанныеФормы(Дерево, ДеревоФайлов); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФильтрПоВиду(Вид)

	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		Или Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат "erf";
	Иначе
		Возврат "epf";	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборЗначения(ВыбраннаяСтрока)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки.Картинка = 3 Тогда
		СтруктураФайла = Новый Структура;
		СтруктураФайла.Вставить("ПолныйПутьКФайлу", ДанныеСтроки.ПолныйПутьКФайлу);
		СтруктураФайла.Вставить("Ветка", Ветка); 	
		
		ОповеститьОВыборе(СтруктураФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Нужно выбрать файл в каталоге'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ИдентификаторСтроки, ПрекратитьПоиск)

    Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
        Если ПрекратитьПоиск Тогда
            Возврат;
        КонецЕсли;

        Если СтрокаДерева.ПолныйПутьКФайлу = ТекущийАдрес Тогда
            ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
            ПрекратитьПоиск = Истина;
            Возврат;
        КонецЕсли;

        КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();

        Если КоллекцияЭлементов.Количество() > 0 Тогда
            НайтиСтрокуДерева(КоллекцияЭлементов, ИдентификаторСтроки, ПрекратитьПоиск);
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИспользованныеИмена(ТекущийАдрес)
	
	Ответ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийАдрес", ТекущийАдрес);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.SslCI_АдресВРепозитории КАК SslCI_АдресВРепозитории
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.SslCI_АдресВРепозитории <> &ТекущийАдрес
	|	И ДополнительныеОтчетыИОбработки.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Ответ = Результат.Выгрузить().ВыгрузитьКолонку("SslCI_АдресВРепозитории");	
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

#КонецОбласти