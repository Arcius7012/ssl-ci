#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ПараметрКоманда = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КомандаРазработки"));
	ПараметрВетки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ветки"));	
	
	ТаблицаДанных = ПолучитьДанныеГита(ПараметрКоманда, ПараметрПериод, ПараметрВетки);
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	ВнешнийНаборДанных = Новый Структура("ДанныеПоКоммитам", ТаблицаДанных); 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	
	ДокументРезультат.Очистить();
	
 	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеГита(ПараметрКоманда, ПараметрПериод, ПараметрВетки) Экспорт  
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		ТекстСообщения = НСтр("ru='Соединение с гитом не установлено'");
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
	Строка50 = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	Строка150 = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	Строка300 = ОбщегоНазначения.ОписаниеТипаСтрока(300);
	Число15 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный);
	
	ИдКоммитаСтрока = Новый Соответствие;
	НомерЗадачиОписание = Новый Соответствие;
	
	ДанныеКоммитов = Новый ТаблицаЗначений;
	ДанныеКоммитов.Колонки.Добавить("ДатаКоммита", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
    ДанныеКоммитов.Колонки.Добавить("Разработчик", Новый ОписаниеТипов("СправочникСсылка.SslCI_Разработчики"));
	ДанныеКоммитов.Колонки.Добавить("КомандаРазработки", Новый ОписаниеТипов("СправочникСсылка.SslCI_КомандаРазработки"));
	ДанныеКоммитов.Колонки.Добавить("Репозиторий", Строка150);
	ДанныеКоммитов.Колонки.Добавить("НомерЗадачи", Строка50);
	ДанныеКоммитов.Колонки.Добавить("ОписаниеЗадачи", Строка300);
	ДанныеКоммитов.Колонки.Добавить("СсылкаДляПерехода", Строка300);
	ДанныеКоммитов.Колонки.Добавить("МержРеквест", Новый ОписаниеТипов("Булево"));
	ДанныеКоммитов.Колонки.Добавить("Ветка", Строка150);
	ДанныеКоммитов.Колонки.Добавить("Мыло", Строка300);
	ДанныеКоммитов.Колонки.Добавить("Автор", Строка300);
	ДанныеКоммитов.Колонки.Добавить("ДобавленоСтрок", Число15);
	ДанныеКоммитов.Колонки.Добавить("УдаленоСтрок", Число15);
	ДанныеКоммитов.Колонки.Добавить("ВсегоСтрок", Число15);
	ДанныеКоммитов.Колонки.Добавить("КоличествоКоммитов", Число15);
	ДанныеКоммитов.Колонки.Добавить("ИдКоммита", Строка50);
	ДанныеКоммитов.Колонки.Добавить("ОписаниеЗадачиТрекер", Строка300);
		
	ДопПараметры = Новый Структура; 
	Если ПараметрПериод.Использование Тогда
		ДопПараметры.Вставить("since", Формат(ПараметрПериод.Значение.ДатаНачала, "ДФ='yyyy-MM-dd''T00:00:00Z'''"));
		ДопПараметры.Вставить("until", Формат(ПараметрПериод.Значение.ДатаОкончания, "ДФ='yyyy-MM-dd''T23:59:59Z'''"));
	КонецЕсли;
	
	ДопПараметры.Вставить("with_stats", "yes");
	
	РазработчикМыло = РазработчикМыло();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	SslCI_КомандаРазработки.Ссылка КАК КомандаРазработки
	|ИЗ
	|	Справочник.SslCI_КомандаРазработки КАК SslCI_КомандаРазработки
	|ГДЕ
	|	НЕ SslCI_КомандаРазработки.ПометкаУдаления
	|	И SslCI_КомандаРазработки.Ссылка = &Ссылка";
		
	Если ПараметрКоманда.Использование Тогда
		Запрос.УстановитьПараметр("Ссылка", ПараметрКоманда.Значение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И SslCI_КомандаРазработки.Ссылка = &Ссылка", "");			
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеПоПроектам = ДанныеПоПроектам(Выборка.КомандаРазработки);
		
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		
		Для Каждого Проект Из ДанныеПоПроектам Цикл
			
			ИдРепозитория = Формат(Проект.ИдРепозитория, "ЧГ=0");
			
			ИмяАпи = "projects/" + ИдРепозитория + "/repository/commits"; 
			
			ИнфоОВетках = SslCI_ДанныеГита.СписокВеток(ИдРепозитория);
			
			Если Не ИнфоОВетках.Успех Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ИнфоОВетках.Результат);
				
				ТекстСообщения = НСтр("ru='Не удалось получить список веток из репозитория. См.Журнал регистрации'");
				ВызватьИсключение(ТекстСообщения);	
			КонецЕсли;
			
			Для Каждого ОписаниеВетки Из ИнфоОВетках.ОписаниеВеток Цикл
				Ветка = ОписаниеВетки.name;
				
				Если ПараметрВетки.Использование Тогда
					Если ТипЗнч(ПараметрВетки.Значение) = Тип("СписокЗначений") Тогда
						Если ПараметрВетки.Значение.НайтиПоЗначению(Ветка) = Неопределено Тогда
							Продолжить;
						КонецЕсли;	
					Иначе
						Если Ветка <> ПараметрВетки.Значение Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ДопПараметры.Вставить("ref_name", Ветка);
				
				СледующаяСтраница = "1";		
				// Перебираем все коммиты
				Пока Истина Цикл
					Если СледующаяСтраница = "" Тогда
						Прервать;
					КонецЕсли;
					
					ДопПараметры.Вставить("page", Число(СледующаяСтраница));
					
					ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита(ИмяАпи, ДопПараметры);	
					
					Если ДанныеГита.Успех Тогда
						Коммиты = SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат, , "authored_date");
						
						Для Каждого Коммит Из Коммиты Цикл
							ЗаполнитьСтрокуПоКоммиту(ИдКоммитаСтрока, ДанныеКоммитов, Проект, Ветка, Коммит, РазработчикМыло, НомерЗадачиОписание);				
						КонецЦикла;
						
						СледующаяСтраница = ДанныеГита.Заголовки.Получить("X-Next-Page");	
					Иначе
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ДанныеГита.Результат);
						
						ТекстСообщения = НСтр("ru='Не удалось получить список коммитов из репозитория. См.Журнал регистрации'");
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеКоммитов;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоКоммиту(ИдКоммитаСтрока, ДанныеКоммитов, Проект, Ветка, Коммит, РазработчикМыло, НомерЗадачиОписание)  
	
	Разработчик = РазработчикМыло.Получить(НРег(Коммит.author_email));
	
	Если Разработчик = Неопределено Тогда
		Разработчик = Справочники.SslCI_Разработчики.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект.ПрефиксЗадачи)
		И СтрНачинаетсяС(Коммит.title, Проект.ПрефиксЗадачи) Тогда
		ОписаниеМассивом = СтрРазделить(Коммит.title, " ", Ложь);
		
		НомерЗадачи = ОписаниеМассивом[0];
		ОписаниеЗадачи = "";
		
		Для Сч = 1 По ОписаниеМассивом.Количество() - 1 Цикл
			Если ОписаниеМассивом[Сч] = "-" Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеЗадачи = ОписаниеЗадачи + ?(ОписаниеЗадачи = "", "", " ") + ОписаниеМассивом[Сч];	
		КонецЦикла;					
	Иначе
		НомерЗадачи = "";	
		ОписаниеЗадачи = Коммит.title;	
	КонецЕсли;				
	
	Если НомерЗадачи <> ""
		И ЗначениеЗаполнено(Проект.ЛогинДоступаТрекер)
		И ЗначениеЗаполнено(Проект.ПарольДоступаТрекер)
		И ЗначениеЗаполнено(Проект.СтрокаПоискаТрекер) Тогда
		
		ОписаниеЗадачиТрекер = НомерЗадачиОписание.Получить(НомерЗадачи);
		
		Если ОписаниеЗадачиТрекер = Неопределено Тогда
			ОписаниеЗадачиТрекер = ДанныеТрекера(Проект, НомерЗадачи);
			
			НомерЗадачиОписание.Вставить(НомерЗадачи, ОписаниеЗадачиТрекер);
		КонецЕсли;
	Иначе
		ОписаниеЗадачиТрекер = Новый Структура("НазваниеЗадачи", "");
	КонецЕсли;	
	
	Строка = ИдКоммитаСтрока.Получить(Коммит.id);
	
	Если Строка = Неопределено Тогда		
		НоваяСтрока = ДанныеКоммитов.Добавить();
		НоваяСтрока.ДатаКоммита = Коммит.authored_date;
		НоваяСтрока.Разработчик = Разработчик;
		НоваяСтрока.КомандаРазработки = Проект.КомандаРазработки;
		НоваяСтрока.Репозиторий = Проект.НазваниеРепозитория;
		НоваяСтрока.НомерЗадачи = НомерЗадачи;
		НоваяСтрока.ОписаниеЗадачи = ОписаниеЗадачи;
		НоваяСтрока.СсылкаДляПерехода = Коммит.web_url;	
		НоваяСтрока.Ветка = Ветка; 
		НоваяСтрока.МержРеквест = СтрНачинаетсяС(ОписаниеЗадачи, "Merge");
		НоваяСтрока.Мыло = Коммит.author_email;
		НоваяСтрока.Автор = Коммит.author_name;
		НоваяСтрока.ДобавленоСтрок = Коммит.stats.additions;
		НоваяСтрока.УдаленоСтрок = Коммит.stats.deletions;
		НоваяСтрока.ВсегоСтрок = Коммит.stats.total;
		НоваяСтрока.КоличествоКоммитов = 1;
		НоваяСтрока.ИдКоммита = Коммит.id;
		НоваяСтрока.ОписаниеЗадачиТрекер = ОписаниеЗадачиТрекер.НазваниеЗадачи;
		
		ИдКоммитаСтрока.Вставить(Коммит.id, НоваяСтрока);
	Иначе
		Если СтрНайти(Строка.Ветка, Ветка) = 0 Тогда 
			Строка.Ветка = Строка.Ветка + ", " + Ветка;
		КонецЕсли;
		
		Если СтрНайти(Строка.Репозиторий, Проект.НазваниеРепозитория) = 0 Тогда 
			Строка.Репозиторий = Строка.Репозиторий + ", " + Проект.НазваниеРепозитория;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазработчикМыло() 
	
	Ответ = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	SslCI_РазработчикиАдресаПочты.Мыло КАК Мыло,
	|	SslCI_РазработчикиАдресаПочты.Ссылка КАК Разработчик
	|ИЗ
	|	Справочник.SslCI_Разработчики.АдресаПочты КАК SslCI_РазработчикиАдресаПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.SslCI_Разработчики КАК SslCI_Разработчики
	|		ПО SslCI_РазработчикиАдресаПочты.Ссылка = SslCI_Разработчики.Ссылка
	|ГДЕ
	|	НЕ SslCI_Разработчики.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ответ.Вставить(Выборка.Мыло, Выборка.Разработчик);	
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ДанныеПоПроектам(КомандаРазработки)  
	
	Ответ = Новый Массив;
	
	ЗапросПроектов = Новый Запрос;
	ЗапросПроектов.УстановитьПараметр("КомандаРазработки", КомандаРазработки);
	ЗапросПроектов.Текст =
	"ВЫБРАТЬ
	|	SslCI_КомандаРазработкиРепозитории.ИдРепозитория КАК ИдРепозитория,
	|	SslCI_КомандаРазработкиРепозитории.НазваниеРепозитория КАК НазваниеРепозитория,
	|	SslCI_КомандаРазработкиРепозитории.ПрефиксЗадачи КАК ПрефиксЗадачи,
	|	SslCI_КомандаРазработкиРепозитории.Ссылка КАК КомандаРазработки,
	|	SslCI_КомандаРазработки.ЛогинДоступаТрекер КАК ЛогинДоступаТрекер,
	|	SslCI_КомандаРазработки.ПарольДоступаТрекер КАК ПарольДоступаТрекер,
	|	SslCI_КомандаРазработки.СтрокаПоискаТрекер КАК СтрокаПоискаТрекер
	|ИЗ
	|	Справочник.SslCI_КомандаРазработки.Репозитории КАК SslCI_КомандаРазработкиРепозитории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.SslCI_КомандаРазработки КАК SslCI_КомандаРазработки
	|		ПО SslCI_КомандаРазработкиРепозитории.Ссылка = SslCI_КомандаРазработки.Ссылка
	|ГДЕ
	|	НЕ SslCI_КомандаРазработки.ПометкаУдаления
	|	И SslCI_КомандаРазработки.Ссылка В(&КомандаРазработки)";
	
	Выборка = ЗапросПроектов.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПроекта = Новый Структура("ИдРепозитория, НазваниеРепозитория, ПрефиксЗадачи, 
			|КомандаРазработки, ЛогинДоступаТрекер, ПарольДоступаТрекер, СтрокаПоискаТрекер");
		
		ЗаполнитьЗначенияСвойств(СтруктураПроекта, Выборка);
		Ответ.Добавить(СтруктураПроекта);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ДанныеТрекера(Проект, НомерЗадачи)
	
	Ответ = Новый Структура("НазваниеЗадачи");
	
	// Сделал только для Jira
	АдресМассивом = СтрРазделить(Проект.СтрокаПоискаТрекер, "/");
	
	Если АдресМассивом.Количество() = 0 Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Таймаут = 30;	
	Попытка
		Соединение = Новый HTTPСоединение(АдресМассивом[0], , Проект.ЛогинДоступаТрекер, Проект.ПарольДоступаТрекер, , Таймаут, Новый ЗащищенноеСоединениеOpenSSL);
	Исключение
		Возврат Ответ;
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type",  "application/json;charset=UTF-8"); 
    	
	ВызываемыйМетод = СтрЗаменить(Проект.СтрокаПоискаТрекер, АдресМассивом[0], "");
	
	Если Прав(ВызываемыйМетод, 1) <> "/" Тогда
		ВызываемыйМетод = ВызываемыйМетод + "/";	
	КонецЕсли;
	
	ВызываемыйМетод = ВызываемыйМетод + НомерЗадачи;
	
	Запрос = Новый HTTPЗапрос(ВызываемыйМетод, Заголовки);
	
	Попытка
		Результат = Соединение.Получить(Запрос);
		РезультатСтрокой = Результат.ПолучитьТелоКакСтроку();
		Соединение = Неопределено;
	Исключение		
		Возврат Ответ;
	КонецПопытки;
	
	СтруктураДанных = SslCI_ДанныеГита.ДанныеГитаСтруктурой(РезультатСтрокой, Истина);
		
	Поля = СтруктураДанных.Получить("fields");
	
	Если Поля = Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	
	summary = Поля.Получить("summary");
	Если summary <> Неопределено Тогда
		Ответ.Вставить("НазваниеЗадачи", summary);	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецЕсли