////////////////////////////////////////////////////////////////////////////////
// Проверка соединения с гитом.
//  
////////////////////////////////////////////////////////////////////////////////
#Область СлужебныйПрограммныйИнтерфейс

Функция СоединениеСГитомУстановлено(НастройкиГита = Неопределено, ПоказыватьУведомления = Ложь) Экспорт
	
	Если НастройкиГита = Неопределено Тогда
		НастройкиГита = SslCI_СлужебныйВызовСервера.ПолучитьТекущиеНастройкиИнтеграции();
	КонецЕсли;
	
	Если НастройкиГита = Неопределено Тогда
		ОповеститьПользователя(ПоказыватьУведомления, "Не заданы настройки для соединения");
		Возврат Ложь;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиГита.АдресГита)
		Или Не ЗначениеЗаполнено(НастройкиГита.ИдПроекта)
		Или Не ЗначениеЗаполнено(НастройкиГита.ТокенДоступа) Тогда
		ОповеститьПользователя(ПоказыватьУведомления, "Не заданы настройки для соединения");
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеГита = SslCI_РаботаСГитом.ПолучитьДанныеГита("user", , НастройкиГита);
	
	Если ДанныеГита.Успех Тогда
		ОповеститьПользователя(ПоказыватьУведомления, "Соединение установлено");
	Иначе
		ОповеститьПользователя(ПоказыватьУведомления, "Соединение не установлено. см.ЖР");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Интеграция с гитом", "Ошибка", ДанныеГита.Результат, , Истина); 
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем правильно ли указан ИД проекта 
	ДанныеГита = SslCI_РаботаСГитом.ПолучитьДанныеГита("/projects/" + Формат(НастройкиГита.ИдПроекта, "ЧГ=0") + "/repository/contributors", , НастройкиГита);
	
	Если ДанныеГита.Успех Тогда
		ОповеститьПользователя(ПоказыватьУведомления, "Проект в репозитории найден");
		Возврат Истина;
	Иначе
		ОповеститьПользователя(ПоказыватьУведомления, "Не найден проект в репозитории. см.ЖР");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Интеграция с гитом", "Ошибка", ДанныеГита.Результат, , Истина); 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИдПроекта(Числом = Истина) Экспорт

	ИдПроекта = ОпределитьЗначение("ИдПроекта", 0);	
	
	Если Числом Тогда
		Возврат Формат(ИдПроекта, "ЧГ=0");
	Иначе
		Возврат ИдПроекта;
	КонецЕсли;
	
КонецФункции

Функция АдресГита() Экспорт
	
	Возврат ОпределитьЗначение("АдресГита", "");
		
КонецФункции

Функция КаталогИсходников() Экспорт
	
	НастройкиГита = SslCI_СлужебныйВызовСервера.ПолучитьТекущиеНастройкиИнтеграции();
	
	Возврат НастройкиГита.КаталогИсходников;
	
КонецФункции

Функция АдресТаскТрекера() Экспорт 
	
	Возврат ОпределитьЗначение("АдресТаскТрекера", "");	
	
КонецФункции

Функция ПрефиксЗадачи() Экспорт 
	
	Возврат ОпределитьЗначение("ПрефиксЗадачи", "");	
	
КонецФункции

Функция ПутьКРепозиторию() Экспорт
	
	Возврат ОпределитьЗначение("ПутьКРепозиторию", "");	
	
КонецФункции

Функция РучноеДобавлениеФайлов() Экспорт
	
	Возврат ОпределитьЗначение("РучноеДобавлениеФайлов", Истина);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьПользователя(ПоказыватьУведомления, ОписаниеСобытия)
	
	Если ПоказыватьУведомления Тогда
		ПоказатьОповещениеПользователя(ОписаниеСобытия, , , БиблиотекаКартинок.SslCI_Гит, СтатусОповещенияПользователя.Важное);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьЗначение(ИмяНастройки, ЗначениеПоУмолчанию)
	
	НастройкиГита = SslCI_СлужебныйВызовСервера.ПолучитьТекущиеНастройкиИнтеграции();
	
	Если НастройкиГита = Неопределено
		Или Не НастройкиГита.Свойство(ИмяНастройки) Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат НастройкиГита[ИмяНастройки];
	КонецЕсли;	
	
КонецФункции

#КонецОбласти