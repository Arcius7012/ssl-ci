////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с гитом по api (см. https://docs.gitlab.com/ee/api/rest). 
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Обновляет внешний отчет/обработку из репозитория. 
// В случае неудачи в интерактивном режиме выводит сообщение, в не интерактивном - выбрасывает исключение.
//
// Параметры:
//	СправочникСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - Ссылка на справочник, который надо обновить.
//	Интерактивно - Булево - По умолчанию: Ложь. Вызов процедуры в интерактивном режиме (например с формы элемента).
//	Реквизиты - Структура - По умолчанию: Неопределено. Реквизиты Справочника.
//
// Возвращаемое значение:
//	Булево - Обработка обновлена.
//
Функция ОбновитьИзРепозитория(СправочникСсылка, Интерактивно = Ложь, Реквизиты = Неопределено) Экспорт
	
	Успех = Ложь;
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = SslCI_СлужебныйВызовСервера.РеквизитыОбъекта(СправочникСсылка, "SslCI_АдресВРепозитории, SslCI_ИДКоммита, SslCI_ИмяВетки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты.SslCI_АдресВРепозитории)
		Или Не ЗначениеЗаполнено(Реквизиты.SslCI_ИмяВетки) Тогда
		Возврат Успех;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьФайлИзРепозитория(Реквизиты.SslCI_АдресВРепозитории, Реквизиты.SslCI_ИмяВетки); 
	
	Если ДанныеФайла.Успех Тогда
		Если ДанныеФайла.СтруктураФайла.last_commit_id <> Реквизиты.SslCI_ИДКоммита Тогда
			ОбновитьФайлВСправочнике(СправочникСсылка, ДанныеФайла, Интерактивно);
			
			Успех = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

// Обновляет все привязанные к гиту отчеты и обработки (включенные) на актуальную версию.
//
// Параметры:
//	Ветка - Строка - По умолчанию: Не указана. Если задать ветку, то перед актуализацией будет выполнено переключение обработки/отчета на указанную ветку.
//	НужноОписаниеОбновления - Булево - По умолчанию: Ложь. Показать описание обновления в отдельном окне.
//
Процедура АктуализацияСправочника(Ветка = "", НужноОписаниеОбновления = Ложь) Экспорт
	
	ФайлыВетки = Неопределено;
	Если Ветка <> "" Тогда
		ФайлыВетки = ПолучитьДанныеРепозитория(Ветка);		
	КонецЕсли;
	
	ОбновленныеФайлы = Новый Массив;
	ФайлыКАктуализации = SslCI_СлужебныйВызовСервера.ФайлыКАктуализации(Ветка, ФайлыВетки);	
		
	Для Каждого ДанныеФайла Из ФайлыКАктуализации Цикл
		ОбработкаОбновлена = ОбновитьИзРепозитория(ДанныеФайла.Ссылка, Истина, ДанныеФайла.Реквизиты);
		Если ОбработкаОбновлена Тогда
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
			ОбновленныеФайлы.Добавить(ДанныеФайла.Ссылка);
		КонецЕсли;
	КонецЦикла;	

	Если НужноОписаниеОбновления Тогда		
		ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.SslCI_ОписаниеОбновления",
			Новый Структура("ОбновленныеФайлы", ОбновленныеФайлы), , Истина, , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в спр.Дополнительных отчетов и обработок все файлы из репозитория, которые еще не были сопоставлены с текущими объектами.
// Для контура ci/cd.
//
// Параметры:
//	Ветка - Строка. Ветка их которой нужно добавить файлы
//
Процедура ДобавитьВсеФайлыИзРепозитория(Ветка) Экспорт
	
	ДанныеРепозитория = ПолучитьДанныеРепозитория(Ветка);
	
	ТекущиеФайлы = SslCI_СлужебныйВызовСервера.ПолучитьСписокТекущихИмен(); 
	
	Для Каждого ФайлРепозитория Из ДанныеРепозитория Цикл
		Если СтрНайти(ФайлРепозитория, "erf") = 0
			И СтрНайти(ФайлРепозитория, "epf") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущиеФайлы.Найти(ФайлРепозитория) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		ДанныеФайла = ПолучитьФайлИзРепозитория(ФайлРепозитория, Ветка);
		
		Если ДанныеФайла.Успех Тогда
			ДвоичныеДанные = Base64Значение(ДанныеФайла.СтруктураФайла.content);
			АдресДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Иначе
			Продолжить;
		КонецЕсли;				
		
		SslCI_СлужебныйВызовСервера.СоздатьНовыйОбъект(ФайлРепозитория, Ветка, АдресДанных);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьДанныеРепозитория(Знач Ветка, Знач ФильтрПоиска = "") Экспорт
	
	Ответ = Новый Массив;
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	Фильтр = Новый Массив;
	Если ФильтрПоиска = "" Тогда
		Фильтр.Добавить("epf");
		Фильтр.Добавить("erf");
	Иначе
		Фильтр.Добавить(ФильтрПоиска);
	КонецЕсли;
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта();
	КаталогИсходников = SslCI_НастройкаИнтеграцииСГитомПовтИсп.КаталогИсходников();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ref", 		Ветка);	
	ДопПараметры.Вставить("recursive", 	"true");
	ДопПараметры.Вставить("per_page", 	"100");
	
	Если ЗначениеЗаполнено(КаталогИсходников) Тогда
		ДопПараметры.Вставить("path", КаталогИсходников);
	КонецЕсли;
	
	ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/" + ИдПроекта + "/repository/tree", ДопПараметры);
	
	Если ДанныеГита.Успех Тогда
		СтруктураДанных = SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат);		
		ОтработатьПорциюДанных(Ответ, СтруктураДанных, Фильтр);
		
		ВсегоСтраниц = Число(ДанныеГита.Заголовки.Получить("X-Total-Pages"));
	Иначе
		Возврат Ответ;
	КонецЕсли;	
	
	Для Сч = 2 По ВсегоСтраниц Цикл
		ДопПараметры.Вставить("page", Сч);
		
		ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/" + ИдПроекта + "/repository/tree", ДопПараметры);
		
		Если ДанныеГита.Успех Тогда
			СтруктураДанных = SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат);		
			ОтработатьПорциюДанных(Ответ, СтруктураДанных, Фильтр);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьФайлИзРепозитория(Знач ПутьКФайлу, Знач Ветка) Экспорт
	
	Ответ = Новый Структура("Успех, СтруктураФайла", Ложь);
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта();
	
	ПутьКФайлу = SslCI_СлужебныйВызовСервера.СтрокаВКодировкеURL(ПутьКФайлу); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ref", Ветка);
		
	ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/" + ИдПроекта + "/repository/files/" + ПутьКФайлу, ДопПараметры);
	
	Если ДанныеГита.Успех Тогда
		Ответ.Вставить("Успех", Истина);
		Ответ.Вставить("СтруктураФайла", SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат));		
	Иначе
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, "Ошибка", ДанныеГита.Результат, , Истина);
		
		ТекстСообщения = НСтр("ru='Не удалось получить файл из репозитория. См.Журнал регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ДанныеКоммита(Знач ИдКоммита) Экспорт

	Ответ = Новый Структура("Успех, СтруктураФайла", Ложь);
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта();
	
	ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/" + ИдПроекта + "/repository/commits/" + ИдКоммита);
	
	Если ДанныеГита.Успех Тогда
		Ответ.Вставить("Успех", Истина);
		Ответ.Вставить("СтруктураФайла", SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат, , "committed_date"));		
	Иначе
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, "Ошибка", ДанныеГита.Результат, , Истина);
		
		ТекстСообщения = НСтр("ru='Не удалось получить коммит из репозитория. См.Журнал регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ИсторияКоммитов(Знач ПутьКФайлу, Знач Ветка) Экспорт
	
	Ответ = Новый Структура("Успех, Коммиты", Ложь);
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта();
	
	ПутьКФайлу = SslCI_СлужебныйВызовСервера.СтрокаВКодировкеURL(ПутьКФайлу);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ref_name", Ветка);
	ДопПараметры.Вставить("path", ПутьКФайлу);
	
	ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/" + ИдПроекта + "/repository/commits", ДопПараметры);
	
	Если ДанныеГита.Успех Тогда
		Ответ.Вставить("Успех", Истина);
		Ответ.Вставить("Коммиты", SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат, , "committed_date"));		
	Иначе
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, "Ошибка", ДанныеГита.Результат, , Истина);
	КонецЕсли;
	
	Возврат Ответ; 
	
КонецФункции

Функция ИнфоОПроекте(НастройкиГита) Экспорт

	Ответ = Новый Структура("Успех, ОписаниеПроекта", Ложь);
	
	Если Не SslCI_НастройкаИнтеграцииСГитомПовтИсп.СоединениеСГитомУстановлено() Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта(Ложь);
	
	ДопПараметры 	= Новый Структура;	
	ДанныеГита 		= SslCI_ДанныеГита.ПолучитьДанныеГита("projects/", , НастройкиГита);
	ВсегоСтраниц	= 0;
	
	Если ДанныеГита.Успех Тогда
		Проекты = SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат);
		
		Для Каждого ИнфоОПроекте Из Проекты Цикл
			Если ИнфоОПроекте.id = ИдПроекта Тогда
				Ответ.Вставить("Успех", Истина);
				Ответ.Вставить("ОписаниеПроекта", ИнфоОПроекте);	
				
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если Не Ответ.Успех = Истина Тогда
			ВсегоСтраниц = Число(ДанныеГита.Заголовки.Получить("X-Total-Pages"));	
		КонецЕсли;
	Иначе
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, "Ошибка", ДанныеГита.Результат, , Истина);
		
		ТекстСообщения = НСтр("ru='Не удалось получить описание проекта из репозитория. См.Журнал регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Для Сч = 2 По ВсегоСтраниц Цикл
		ДопПараметры.Вставить("page", Сч);
		
		ДанныеГита = SslCI_ДанныеГита.ПолучитьДанныеГита("projects/", ДопПараметры);
		
		Если ДанныеГита.Успех Тогда
			Проекты = SslCI_ДанныеГита.ДанныеГитаСтруктурой(ДанныеГита.Результат);		
			
			Для Каждого ИнфоОПроекте Из Проекты Цикл
				Если ИнфоОПроекте.id = ИдПроекта Тогда
					Ответ.Вставить("Успех", Истина);
					Ответ.Вставить("ОписаниеПроекта", ИнфоОПроекте);	
					
					Прервать;
				КонецЕсли;			
			КонецЦикла;
			
			Если Ответ.Успех = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Ответ;
	
КонецФункции

Функция АдресКоммита(ИдКоммита) Экспорт
	
	ПутьКРепозиторию = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ПутьКРепозиторию();
	
	Если ПутьКРепозиторию = ""
		Или ИдКоммита = "" Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаАдреса = ПутьКРепозиторию + "/-/commit/" + ИдКоммита;
	
	Возврат СтрокаАдреса;
	
КонецФункции

Функция НомерЗадачи(СообщениеКоммита) Экспорт
	
	ПрефиксЗадачи = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ПрефиксЗадачи();
	
	Если Не ЗначениеЗаполнено(ПрефиксЗадачи) Тогда
		Возврат "";
	КонецЕсли;

	ПозицияПоиска = СтрНайти(СообщениеКоммита, ПрефиксЗадачи);
	
	Если ПозицияПоиска = 0 Тогда
		Возврат "";
	Иначе
		ПозицияПоиска2 = СтрНайти(СообщениеКоммита, " ", , ПозицияПоиска);
				
		Если ПозицияПоиска2 = 0 Тогда
			НомерЗадачи = Сред(СообщениеКоммита, ПозицияПоиска, СтрДлина(СообщениеКоммита));	
		Иначе
			НомерЗадачи = Сред(СообщениеКоммита, ПозицияПоиска, ПозицияПоиска2 - ПозицияПоиска);
		КонецЕсли;
		
		Возврат НомерЗадачи;
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьЗадачуВТрекере(Знач СообщениеКоммита) Экспорт
	
	НомерЗадачи = НомерЗадачи(СообщениеКоммита);
	
	Если НомерЗадачи = "" Тогда
		ТекстСообщения = НСтр("ru='Задача не найдена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	АдресТаскТрекера = SslCI_НастройкаИнтеграцииСГитомПовтИсп.АдресТаскТрекера();
	
	Если Не ЗначениеЗаполнено(АдресТаскТрекера) Тогда
		ТекстСообщения = НСтр("ru='Не задан адрес таск-трекера в настройках гита'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СсылкаДляПерехода = АдресТаскТрекера; 
	Если Не СтрНачинаетсяС(СсылкаДляПерехода, "http") Тогда
		СсылкаДляПерехода = "https://" + СсылкаДляПерехода;
	КонецЕсли;
	
	Если Прав(СсылкаДляПерехода, 1) <> "/" Тогда
		СсылкаДляПерехода = СсылкаДляПерехода + "/";	
	КонецЕсли;		
	
	ПерейтиПоНавигационнойСсылке(СсылкаДляПерехода + НомерЗадачи);
	
КонецПроцедуры

Процедура ОткрытьКоммит(Знач ИдКоммита) Экспорт

	АдресКоммита = АдресКоммита(ИдКоммита);
	
	Если АдресКоммита <> "" Тогда
		ПерейтиПоНавигационнойСсылке(АдресКоммита);	
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеКоммита(СтруктураФайла) Экспорт

	АвторКоммита = СтруктураФайла.committer_name 
		+ " <" + СтруктураФайла.committer_email + ">";
	
	ОписаниеКоммита = Новый Структура;
	ОписаниеКоммита.Вставить("SslCI_ИДКоммита", 		СтруктураФайла.id);
	ОписаниеКоммита.Вставить("SslCI_АвторКоммита", 		АвторКоммита);
	ОписаниеКоммита.Вставить("SslCI_ДатаКоммита", 		СтруктураФайла.committed_date);
	ОписаниеКоммита.Вставить("SslCI_СообщениеКоммита", 	СтруктураФайла.message);

	Возврат ОписаниеКоммита; 
	
КонецФункции

Процедура ЗаполнитьСписокВеток(Элементы) Экспорт
	
	ИдПроекта = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИдПроекта();
	
	ДанныеРепозитория = SslCI_ДанныеГита.СписокВеток(ИдПроекта);

	Если ДанныеРепозитория.Успех = Истина Тогда
		Ветки = Новый Массив;
		
		Для Каждого ОписаниеВетки Из ДанныеРепозитория.ОписаниеВеток Цикл
			Ветки.Добавить(ОписаниеВетки.name);	
		КонецЦикла;
		
		Элементы.Ветка.СписокВыбора.ЗагрузитьЗначения(Ветки);
	Иначе
		ИмяСобытия = SslCI_НастройкаИнтеграцииСГитомПовтИсп.ИмяСобытияЖР();
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, "Ошибка", ДанныеРепозитория.Результат, , Истина);
		
		ТекстСообщения = НСтр("ru='Не удалось получить список веток из репозитория. См.Журнал регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиНаКоммит(СправочникСсылка, Знач ИмяФайла, Знач ИдКоммита) Экспорт

	// Структура репозитория могла поменяться
	ФайлыКоммита = ПолучитьДанныеРепозитория(ИдКоммита);
	
	Если ФайлыКоммита.Найти(ИмяФайла) = Неопределено Тогда
		ИмяДляПоиска = ИмяФайлаБезПути(ИмяФайла); 
		
		ЕстьСовпадение = Ложь;
		Для Каждого ФайлКоммита Из ФайлыКоммита Цикл			
			Если ИмяДляПоиска = ИмяФайлаБезПути(ФайлКоммита) Тогда
				ИмяФайла = ФайлКоммита;
				ЕстьСовпадение = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Если Не ЕстьСовпадение Тогда
			ТекстСообщения = НСтр("ru='Не удалось определить файл в коммите. Обновление невозможно'");
			ВызватьИсключение(ТекстСообщения);	
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьФайлИзРепозитория(ИмяФайла, ИдКоммита);
	         
	Если ДанныеФайла.Успех = Истина Тогда
		ОбновитьФайлВСправочнике(СправочникСсылка, ДанныеФайла, Истина, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не удалось получить файл из коммита. Обновление невозможно'");
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтработатьПорциюДанных(Ответ, СтруктураДанных, Фильтр)

	Для Каждого ДанныеФайла Из СтруктураДанных Цикл
		ПозицияРасширения = СтрНайти(ДанныеФайла.path, ".", НаправлениеПоиска.СКонца);
		
		Если ПозицияРасширения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Расширение = Сред(ДанныеФайла.path, ПозицияРасширения + 1, 3); 
		
		Если Фильтр.Найти(Расширение) <> Неопределено Тогда			
			Ответ.Добавить(ДанныеФайла.path);	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьФайлВСправочнике(СправочникСсылка, ДанныеФайла, Интерактивно, ОтключитьОбновление = Ложь)

	ДанныеКоммита = ДанныеКоммита(ДанныеФайла.СтруктураФайла.last_commit_id); 
	
	Если ДанныеКоммита.Успех Тогда
		
		ОписаниеКоммита = ОписаниеКоммита(ДанныеКоммита.СтруктураФайла);
		
		ДвоичныеДанные = Base64Значение(ДанныеФайла.СтруктураФайла.content);
		ИмяФайла = ДанныеФайла.СтруктураФайла.file_name;
		
		Если SslCI_СлужебныйВызовСервера.ОбновитьОбработкуОтчет(СправочникСсылка, ИмяФайла, ДвоичныеДанные, ОписаниеКоммита, ОтключитьОбновление) Тогда
			Если Интерактивно Тогда
				ОповеститьОбИзменении(СправочникСсылка);
			КонецЕсли;
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не удалось обновить обработку/отчет %1 См.Журнал регистрации'");
			ТекстСообщения 	= СтрШаблон(ШаблонСообщения, СправочникСсылка); 		
			
			Если Интерактивно Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СправочникСсылка);
			Иначе
				ВызватьИсключение(ТекстСообщения);	
			КонецЕсли;
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяФайлаБезПути(ПутьКФайлу)
	
	СтруктураФайла = СтрРазделить(ПутьКФайлу, "/", Ложь);
	
	ИмяФайла = СтруктураФайла.Получить(СтруктураФайла.Количество() - 1);
	
	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти